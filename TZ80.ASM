;******************************************************
;
; THIS IS AN EXAMPLE PROGRAM FOR THE Z80 u-PROCESSOR.
; IT IS TAKEN FROM PAGE 255 OF THE APRIL 5, 1984
; ISSUE OF EDN, AND AFTER ONLY FORMAT MODIFICATIONS FOR
; CROSS-16, IT IS PASSED ON AS AN EXAMPLE, FREE OF
; CHARGE, BY UNIVERSAL CROSS-ASSEMBLERS.

	CPU     "Z80.TBL"	; CPU TABLE
	HOF     "INT8"	 	; HEX OUTPUT FORMAT

; AN OCTOTHROPE '#' HAS ADDED TO THE FOLLOWING Z80 IMMEDIATE
; ADDRESSING INSTRUCTIONS:

;	ADCA,#{8B8}^CE00:
;	ADDA,#{8B8}^C600:
;	AND#{8B8}^E600:
;	CP#{8B8}^FE00:
;	LD(HL),#{8B8}^3600:
;	LD(IX+{16B8}),#{24B8}^DD360000:
;	LD(IY+{16B8}),#{24B8}^FD360000:
;	LDBC,#{8I16}^010000:
;	LDDE,#{8I16}^110000:
;	LDHL,#{8I16}^210000:
;	LDIX,#{16I16}^DD210000:
;	LDIY,#{16I16}^FD210000:
;	LDSP,#{8I16}^310000:
;	LD{2B3},#{8B8}^0600:
;	OR#{8B8}^F600:
;	SBCA,#{8B8}^DE00:
;	SUB#{8B8}^D600:
;	XOR#{8B8}^EE00:

; TO AVOID CONFUSION WITH THE CPD AND CPL INSTRUCTIONS, 
; THE CP REG INSTRUCTION HAS BEEN MOVED FORWARD FROM ITS 
; SORTED POSITION IN THE Z80 TABLE AS SHOWN BELOW:
;
;	CP{5B3}^B8:	<<<<< MOVED FROM NORMAL SORT POSITION
;	CP#{8B8}^FE00:
;	CP(HL)^BE:
;	CP(IX+{16B8})^DDBE00:
;	CP(IY+{16B8})^FDBE00:
;	CPD^EDA9:
;	CPDR^EDB9:
;	CPI^EDA1:
;	CPIR^EDB1:
;	CPL^2F:

	ORG	1000H

	CP	D	; TEST COMPARE INSTRUCTIONS	
	CP	L
	CPD
	CPL

; FOR SIMILAR REASONS RL REG, RR REG, RLC REG, AND RRC REG 
; INSTRUCTIONS HAVE ALSO BEEN MOVED FORWARD FROM THEIR 
; SORTED POSITIONS IN THE Z80 TABLE AS SHOWN BELOW:

;	RL{13B3}^CB10:	<<<<< MOVED FROM NORMAL SORT POSITION
;	RL(HL)^CB16:
;	RL(IX+{16B8})^DDCB0016:
;	RL(IY+{16B8})^FDCB0016:
;	RLA^17:
;	RLC{13B3}^CB00:	<<<<< MOVED FROM NORMAL SORT POSITION
;	RLC(HL)^CB06:
;	RLC(IX+{16B8})^DDCB0006:
;	RLC(IY+{16B8})^FDCB0006:
;	RLCA^07:
;	RLD^ED6F:
;	RR{13B3}^CB18:	<<<<< MOVED FROM NORMAL SORT POSITION
;	RR(HL)^CB1E:
;	RR(IX+{16B8})^DDCB001E:
;	RR(IY+{16B8})^FDCB001E:
;	RRA^1F:
;	RRC{13B3}^CB08:	<<<<< MOVED FROM NORMAL SORT POSITION
;	RRC(HL)^CB0E:
;	RRC(IX+{16B8})^DDCB000E:
;	RRC(IY+{16B8})^FDCB000E:
;	RRCA^0F:
;	RRD^ED67:

	RL	D	; TEST ROTATE LEFT THROUGH CARRY
	RL	A
	RLA
	RLD

	RR	D	; TEST ROTATE RIGHT THROUGH CARRY
	RR	A
	RRA
	RRD

	RLC	A	; TEST ROTATE LEFT CIRCULAR
	RLCA

	RRC	A	; TEST ROTATE RIGHT CIRCULAR
	RRCA

; THE Z80 SET INSTRUCTIONS HAVE BEEN CHANGED TO SETT TO
; AVOID CONFUSION WITH THE SET DIRECTIVE USED BY CROSS-16.

        SETT   6, (HL)       ; TEST SET INSTRUCTION
        SETT   3, L
        SETT   5, (IX + 5H)
        SETT   7, (IY + 6H)


;***********************************************************
;
;  POLAR -- RECTANGULAR TO POLAR CONVERSION
;
;  AUTHOR:  HENRY WOLFSON
;           ELECTRO-OPTICAL SYSTEMS
;           MAHWAH, NJ
;
;
;  ENTER WITH IX = X
;             IY = Y
;
;  RETURN WITH DE = R = SQRT( X**2 + Y**2 )
;   AND        HL = ATAN ( Y/X ) IN RADIANS * 2 **( 15 )
;
;DURING PROCESSING THE REGISTERS USED ARE AS FOLLOWS:
;
;	B' = SHIFT CTR,  S
;	C' = STEP CTR
;	BC = CURRENT ENTRY FROM ARCTAN TABLE, POLTBL
;	DE = ANGLE ACCUMULATOR (ALGEBRAIC SUM OF BC )
;	HL = POINTER TO CURRENT ENTRY IN POLTBL
;	DE'= TEMP STG FOR X / 2**STEPCTR
;	HL'=		  Y / 2**STEPCTR
;
;
;	THE SUM OF THE SQUARES OF X AND Y MUST BE LESS
;	THAN 9B74 HEX.
;  Y IS A NORMAL TWO'S COMPLEMENT NR.
;  X MUST BE POS INTEGER,  LESS THAN 7FFF HEX
;
;***********************************************************
;
	ORG	0H		; RESET ORIGIN

POLAR:	LD	DE,#0	;CLEAR ANGLE ACCUM
	LD	HL,#POLTBL   ;SET TABLE PTR TO 1ST ENTRY
	EXX
	LD	C,#0	;INITIALIZE STEP CTR = 0
;
; ****   MAIN LOOP STARTS HERE    ****
;
POLOOP:	PUSH	IX	;  DE' = X
	POP	DE	
	PUSH	IY	;  HL' = Y
	POP	HL
;SET SHIFT CTR = STEP CTR, THEN SHIFT DE' AND HL' RT S TIMES
	LD	B,C	; B' = C'      STEP CTR
	XOR	A
	CP	B
	JR	Z,POL002   ;BYPASS IF S = 0 (FIRST STEP)
POL001:	SRL	D	;SHIFT X AND Y RIGHT
	RR	E	;LOGICAL SHIFT FOR X
	SRA	H	;ARITHMETIC SHIFT FOR Y
	RR	L	
	DJNZ	POL001	;SHIFT UNTIL S = 0
POL002:	EXX		;GET TABLE ENTRY INTO BC
	LD	C,(HL)
	INC	HL
	LD	B,(HL)
	INC	HL
	EXX
	BIT 	7,H	;TEST SIGN OF Y
	JR	Z,POLRCW   ;IF Y>0 THEN ROTATE CLOCKWISE
	EXX		;ELSE ROTATE CCW
	LD	A,E	;SUBT TABLE ENTRY FROM ANGLE ACCUM
	SUB	C	
	LD	E,A
	LD	A,D
	SBC	A,B
	LD	D,A	; DE = DE - BC
	EXX
	ADD	IY,DE	;  Y = Y + X/(2**(STEPCTR))
	CALL	CM2	;TWOS COMPL HL'
	EX	DE,HL
	ADD	IX,DE	;  X = X - Y/(2**(STEPCTR))
POL003:	INC	C	;NEXT STEP
	LD	A,C	;TEST STEP CTR = 15
	CP	#15	
	JR	Z,POLOOP   ;LOOP BACK IF NOT 15
	LD	BC,(POLCON) ;ELSE FINISH UP
	PUSH	IX	;BC'= COS(45)*COS(26)*COS(14)....
	POP	DE	;DE' = X
	CALL	MUL	; DE' = DE' * BC'
	EXX
	PUSH	DE	;GET ACCUMULATED ANGLE
	EXX
	POP	HL		;  HL' = DE
	RET
POLRCW:	EXX		;FOR CW ROTATION, ADD TABLE ENTRY
			;TO ANGLE ACCUM
	EX	DE,HL	
	ADD	HL,BC
	EX	DE,HL	;  DE = DE + BC
	EXX
	EX	DE,HL
	ADD	IX,DE	; X = X + Y/(2**(STEPCTR))
	CALL	CM2	;  COMPLEMENT HL'
	EX	DE,HL
	ADD	IY,DE	;  Y = Y - X/(2**(STEPCTR))
	JR	POL003
;
;   DATA
;
POLCON:	DWL	39797	;(2**16)*COS(45)*COS(27)*COS(14)....
;
;  ARCTANGENT TABLE --- ATN(1/2**(N))  --- UNITS ARE
;		        RADIANS * 2 **(14)
;
POLTBL:	DWL	12868	; 0	45.00	DEG
	DWL	 7596	; 1	26.57
	DWL	 4014	; 2	14.04
	DWL	 2037	; 3	 7.13
	DWL	 1023	; 4	 3.58
	DWL	  512	; 5	 1.79
	DWL	  256	; 6	  .90
	DWL	  128	; 7	  .45
	DWL	   64	; 8	  .22
	DWL	   32	; 9	  .11
	DWL	   16   ;10	  .056
	DWL	    8   ;11	  .028
	DWL	    4	;12	  .014
	DWL	    2	;13	  .007
	DWL	    1	;14       .0035
;
;***********************************************************
;
;     MUL ---  TWO BYTE MULTIPLY --
;
;   ENTER WITH BC AND BE CONTAINING THE TWO 16 BIT
;   MULTIPLICANDS.
;
;   THE 32 BIT RESULT IS IN DE AND HL, DE IS MSW.
;   BC IS UNCHANGED.
;
;***********************************************************
;
MUL:	XOR	A	;CLEAR A AND CARRY FLAG
	LD 	H,A	;CLEAR PARTIAL PROD LSBS IN H AND L
	LD	L,A	
	LD	A,#16	;SET LOOP CTR = 16
MUL1:	EX	DE,HL	;LEFTSHIFT DE WITH CARRY
	ADC	HL,HL
	EX	DE,HL
	JR	NC,MUL2		;ADD BC TO PARTIAL PROD
	ADD	HL,BC		;IF MSB OF DE WAS A 1
	JR	NC,MUL2		;INCREMENT DE IF HL MADE
	INC	DE		;A CARRY
MUL2:	DEC	A	;DECREMENT LOOP COUNTER
	RET	Z	;RETURN IF ZERO
	ADD	HL,HL	;LEFT SHIFT HL, THEN DE
	JR	MUL1
;
;
;***********************************************************
;
;   CM2  ---  SUBROUTINE TO TWOS COMPLEMENT A 2 BYTE
;	NUMBER IN HL
;
CM2:	LD	A,H
	CPL
	LD	H,A
	LD	A,L
	CPL
	LD	L,A
	INC	HL
	RET
;
	END
